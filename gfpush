#!/bin/bash

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

all=""
branch=$(parse_git_branch)
scope=""
message=""
commit_type=-1
exclamation_mark=""

declare TYPE=( [1]="build" [2]="chore" [3]="ci" [4]="docs" 
               [5]="feat" [6]="fix" [7]="perf" [8]="refactor"
               [9]="revert" [10]="style" [11]="test" )

version="0.1.2"

help="
NAME:
   gfpush - Git Fast Push

USAGE:
   gfpush [global options...]

VERSION:
   $version

AUTHOR:
   Anushervon Nabiev <nabievanush1@gmail.com>

GLOBAL OPTIONS:
   -a                  Tell the command to automatically stage files that have been modified and deleted,
                       but new files you have not told Git about are not affected. (default: false)
   -e                  Add (!) to convention. (default: false)
   -m <msg>            Use the given <msg> as the commit message.
   -s value            Scope of commit.
   -t value            Type of commit message:
                        1: build - changes that affect the build system or external dependencies
                        2: chore - changes that do not relate to a fix or feature and dont modify src or test files 
                        3: ci - continuous integration related
                        4: docs - updates to documentation 
                        5: feat - a new feature is introduced with the changes
                        6: fix - a bug fix has occurred
                        7: perf - performance improvements
                        8: refactor - refactored code that neither fixes a bug nor adds a feature
                        9: revert - reverts a previous commit
                        10: style - changes that do not affect the meaning of the code (white-space, missing semi-colons, and so on)
                        11: test - including new or correcting previous tests
   -h                  Show help
   -v                  Print gfpush version (default: false)
   
EXAMPLE:
    gfpush -t 5 -m 'Add OAuth2 via Keycloak' --> feat: Add OAuth2 via Keycloak
    gfpush -e -t 4 -m 'Add Examples unit'    --> doc!: Add Examples unit 
    gfpush -e -t 5 -s api -m 'Add metrics'   --> feat(api)!: Add metrics
"

while getopts hvaem:s:t: opt; do
  case "$opt" in
      a) all="-a";;
      e) exclamation_mark="!";;
      h) echo "$help"; exit 0;;
      m) message="$OPTARG";;
      s) scope="($OPTARG)";;
      t) commit_type="$OPTARG";;
      v) echo "gfpush version $version"; exit 0;;
  esac
done


if [[ "$commit_type" -le 0 ]]  || [[ "$commit_type" -ge 12 ]] || [[ ! -n "$commit_type" ]]; then
  echo "1: build  3: ci    5: feat  7: perf      9: revert  11: test 
2: chore  4: docs  6: fix   8: refactor  10: style";
  exit 1;
fi

if [[ ! -n "$message" ]]; then
  exit 1;
fi

echo "Commiting file(s) status:";
git status -s
echo;
eval "git commit -q $all -m '${TYPE[$commit_type]}$scope$exclamation_mark: $message' && git push -q origin $branch";
echo "Everything up-to-date ðŸš€";
exit 0
